/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.headexceptions;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in HeadExceptions.
 */
public interface HeadExceptions {
    /**
     * Return 200 status code if successful.
     *
     */
    void head200();

    /**
     * Return 200 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> head200Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 200 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> head200Async();

    /**
     * Return 200 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> head200WithServiceResponseAsync();

    /**
     * Return 204 status code if successful.
     *
     */
    void head204();

    /**
     * Return 204 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> head204Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 204 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> head204Async();

    /**
     * Return 204 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> head204WithServiceResponseAsync();

    /**
     * Return 404 status code if successful.
     *
     */
    void head404();

    /**
     * Return 404 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> head404Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 404 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> head404Async();

    /**
     * Return 404 status code if successful.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> head404WithServiceResponseAsync();

}
