/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber.implementation;

import retrofit2.Retrofit;
import fixtures.bodynumber.Numbers;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import fixtures.bodynumber.models.ErrorException;
import java.io.IOException;
import java.math.BigDecimal;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Numbers.
 */
public final class NumbersImpl implements Numbers {
    /** The Retrofit service to perform REST calls. */
    private NumbersService service;
    /** The service client containing this operation class. */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of Numbers.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(Retrofit retrofit, AutoRestNumberTestServiceImpl client) {
        this.service = retrofit.create(NumbersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Numbers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NumbersService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/null")
        Observable<Response<ResponseBody>> getNull();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invalidfloat")
        Observable<Response<ResponseBody>> getInvalidFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invaliddouble")
        Observable<Response<ResponseBody>> getInvalidDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/invaliddecimal")
        Observable<Response<ResponseBody>> getInvalidDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/float/3.402823e+20")
        Observable<Response<ResponseBody>> putBigFloat(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/float/3.402823e+20")
        Observable<Response<ResponseBody>> getBigFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/2.5976931e+101")
        Observable<Response<ResponseBody>> putBigDouble(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/2.5976931e+101")
        Observable<Response<ResponseBody>> getBigDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/99999999.99")
        Observable<Response<ResponseBody>> putBigDoublePositiveDecimal(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/99999999.99")
        Observable<Response<ResponseBody>> getBigDoublePositiveDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/double/-99999999.99")
        Observable<Response<ResponseBody>> putBigDoubleNegativeDecimal(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/double/-99999999.99")
        Observable<Response<ResponseBody>> getBigDoubleNegativeDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/2.5976931e+101")
        Observable<Response<ResponseBody>> putBigDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/2.5976931e+101")
        Observable<Response<ResponseBody>> getBigDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/99999999.99")
        Observable<Response<ResponseBody>> putBigDecimalPositiveDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/99999999.99")
        Observable<Response<ResponseBody>> getBigDecimalPositiveDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/big/decimal/-99999999.99")
        Observable<Response<ResponseBody>> putBigDecimalNegativeDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/big/decimal/-99999999.99")
        Observable<Response<ResponseBody>> getBigDecimalNegativeDecimal();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/float/3.402823e-20")
        Observable<Response<ResponseBody>> putSmallFloat(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/float/3.402823e-20")
        Observable<Response<ResponseBody>> getSmallFloat();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/double/2.5976931e-101")
        Observable<Response<ResponseBody>> putSmallDouble(@Body double numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/double/2.5976931e-101")
        Observable<Response<ResponseBody>> getSmallDouble();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("number/small/decimal/2.5976931e-101")
        Observable<Response<ResponseBody>> putSmallDecimal(@Body BigDecimal numberBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("number/small/decimal/2.5976931e-101")
        Observable<Response<ResponseBody>> getSmallDecimal();

    }

    /**
     * Get null Number value.
     *
     * @return the double object if successful.
     */
    public double getNull() {
        return getNullWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getNullAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getNullWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get null Number value.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getNullAsync() {
        return getNullWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get null Number value.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getNullWithServiceResponseAsync() {
        return service.getNull()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getNullDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getNullDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid float Number value.
     *
     * @return the double object if successful.
     */
    public double getInvalidFloat() {
        return getInvalidFloatWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getInvalidFloatWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get invalid float Number value.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getInvalidFloatAsync() {
        return getInvalidFloatWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get invalid float Number value.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getInvalidFloatWithServiceResponseAsync() {
        return service.getInvalidFloat()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getInvalidFloatDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getInvalidFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid double Number value.
     *
     * @return the double object if successful.
     */
    public double getInvalidDouble() {
        return getInvalidDoubleWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getInvalidDoubleWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get invalid double Number value.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getInvalidDoubleAsync() {
        return getInvalidDoubleWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get invalid double Number value.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getInvalidDoubleWithServiceResponseAsync() {
        return service.getInvalidDouble()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getInvalidDoubleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getInvalidDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<BigDecimal> getInvalidDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceCall.create(getInvalidDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<BigDecimal> getInvalidDecimalAsync() {
        return getInvalidDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<BigDecimal>, BigDecimal>() {
            @Override
            public BigDecimal call(ServiceResponse<BigDecimal> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<ServiceResponse<BigDecimal>> getInvalidDecimalWithServiceResponseAsync() {
        return service.getInvalidDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDecimal>>>() {
                @Override
                public Observable<ServiceResponse<BigDecimal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDecimal> clientResponse = getInvalidDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDecimal> getInvalidDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     */
    public void putBigFloat(double numberBody) {
        putBigFloatWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigFloatWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigFloatAsync(double numberBody) {
        return putBigFloatWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigFloatWithServiceResponseAsync(double numberBody) {
        return service.putBigFloat(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigFloatDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return the double object if successful.
     */
    public double getBigFloat() {
        return getBigFloatWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getBigFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getBigFloatWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getBigFloatAsync() {
        return getBigFloatWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getBigFloatWithServiceResponseAsync() {
        return service.getBigFloat()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getBigFloatDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getBigFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     */
    public void putBigDouble(double numberBody) {
        putBigDoubleWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDoubleWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDoubleAsync(double numberBody) {
        return putBigDoubleWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDoubleWithServiceResponseAsync(double numberBody) {
        return service.putBigDouble(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDoubleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return the double object if successful.
     */
    public double getBigDouble() {
        return getBigDoubleWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getBigDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getBigDoubleWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getBigDoubleAsync() {
        return getBigDoubleWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getBigDoubleWithServiceResponseAsync() {
        return service.getBigDouble()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getBigDoubleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getBigDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     */
    public void putBigDoublePositiveDecimal(double numberBody) {
        putBigDoublePositiveDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDoublePositiveDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDoublePositiveDecimalAsync(double numberBody) {
        return putBigDoublePositiveDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDoublePositiveDecimalWithServiceResponseAsync(double numberBody) {
        return service.putBigDoublePositiveDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDoublePositiveDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDoublePositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return the double object if successful.
     */
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getBigDoublePositiveDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getBigDoublePositiveDecimalAsync() {
        return getBigDoublePositiveDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getBigDoublePositiveDecimalWithServiceResponseAsync() {
        return service.getBigDoublePositiveDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getBigDoublePositiveDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getBigDoublePositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     */
    public void putBigDoubleNegativeDecimal(double numberBody) {
        putBigDoubleNegativeDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDoubleNegativeDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDoubleNegativeDecimalAsync(double numberBody) {
        return putBigDoubleNegativeDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDoubleNegativeDecimalWithServiceResponseAsync(double numberBody) {
        return service.putBigDoubleNegativeDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDoubleNegativeDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDoubleNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return the double object if successful.
     */
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getBigDoubleNegativeDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getBigDoubleNegativeDecimalAsync() {
        return getBigDoubleNegativeDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getBigDoubleNegativeDecimalWithServiceResponseAsync() {
        return service.getBigDoubleNegativeDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getBigDoubleNegativeDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getBigDoubleNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     */
    public void putBigDecimal(BigDecimal numberBody) {
        putBigDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDecimalWithServiceResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimal() {
        return getBigDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<BigDecimal> getBigDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceCall.create(getBigDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<BigDecimal> getBigDecimalAsync() {
        return getBigDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<BigDecimal>, BigDecimal>() {
            @Override
            public BigDecimal call(ServiceResponse<BigDecimal> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<ServiceResponse<BigDecimal>> getBigDecimalWithServiceResponseAsync() {
        return service.getBigDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDecimal>>>() {
                @Override
                public Observable<ServiceResponse<BigDecimal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDecimal> clientResponse = getBigDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDecimal> getBigDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     */
    public void putBigDecimalPositiveDecimal(BigDecimal numberBody) {
        putBigDecimalPositiveDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDecimalPositiveDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalPositiveDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDecimalPositiveDecimalWithServiceResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalPositiveDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDecimalPositiveDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDecimalPositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<BigDecimal> getBigDecimalPositiveDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceCall.create(getBigDecimalPositiveDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return getBigDecimalPositiveDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<BigDecimal>, BigDecimal>() {
            @Override
            public BigDecimal call(ServiceResponse<BigDecimal> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<ServiceResponse<BigDecimal>> getBigDecimalPositiveDecimalWithServiceResponseAsync() {
        return service.getBigDecimalPositiveDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDecimal>>>() {
                @Override
                public Observable<ServiceResponse<BigDecimal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDecimal> clientResponse = getBigDecimalPositiveDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDecimal> getBigDecimalPositiveDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     */
    public void putBigDecimalNegativeDecimal(BigDecimal numberBody) {
        putBigDecimalNegativeDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBigDecimalNegativeDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalNegativeDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBigDecimalNegativeDecimalWithServiceResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalNegativeDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBigDecimalNegativeDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBigDecimalNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<BigDecimal> getBigDecimalNegativeDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceCall.create(getBigDecimalNegativeDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return getBigDecimalNegativeDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<BigDecimal>, BigDecimal>() {
            @Override
            public BigDecimal call(ServiceResponse<BigDecimal> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<ServiceResponse<BigDecimal>> getBigDecimalNegativeDecimalWithServiceResponseAsync() {
        return service.getBigDecimalNegativeDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDecimal>>>() {
                @Override
                public Observable<ServiceResponse<BigDecimal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDecimal> clientResponse = getBigDecimalNegativeDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDecimal> getBigDecimalNegativeDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     */
    public void putSmallFloat(double numberBody) {
        putSmallFloatWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putSmallFloatWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putSmallFloatAsync(double numberBody) {
        return putSmallFloatWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putSmallFloatWithServiceResponseAsync(double numberBody) {
        return service.putSmallFloat(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putSmallFloatDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putSmallFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return the double object if successful.
     */
    public double getSmallFloat() {
        return getSmallFloatWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getSmallFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getSmallFloatWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getSmallFloatAsync() {
        return getSmallFloatWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getSmallFloatWithServiceResponseAsync() {
        return service.getSmallFloat()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getSmallFloatDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getSmallFloatDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     */
    public void putSmallDouble(double numberBody) {
        putSmallDoubleWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putSmallDoubleWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putSmallDoubleAsync(double numberBody) {
        return putSmallDoubleWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putSmallDoubleWithServiceResponseAsync(double numberBody) {
        return service.putSmallDouble(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putSmallDoubleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putSmallDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return the double object if successful.
     */
    public double getSmallDouble() {
        return getSmallDoubleWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Double> getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceCall.create(getSmallDoubleWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return the observable to the double object
     */
    public Observable<Double> getSmallDoubleAsync() {
        return getSmallDoubleWithServiceResponseAsync().map(new Func1<ServiceResponse<Double>, Double>() {
            @Override
            public Double call(ServiceResponse<Double> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return the observable to the double object
     */
    public Observable<ServiceResponse<Double>> getSmallDoubleWithServiceResponseAsync() {
        return service.getSmallDouble()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Double>>>() {
                @Override
                public Observable<ServiceResponse<Double>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Double> clientResponse = getSmallDoubleDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Double> getSmallDoubleDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Double, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Double>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     */
    public void putSmallDecimal(BigDecimal numberBody) {
        putSmallDecimalWithServiceResponseAsync(numberBody).toBlocking().single().getBody();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putSmallDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putSmallDecimalWithServiceResponseAsync(numberBody), serviceCallback);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putSmallDecimalAsync(BigDecimal numberBody) {
        return putSmallDecimalWithServiceResponseAsync(numberBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putSmallDecimalWithServiceResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putSmallDecimal(numberBody)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putSmallDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putSmallDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<BigDecimal> getSmallDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceCall.create(getSmallDecimalWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<BigDecimal> getSmallDecimalAsync() {
        return getSmallDecimalWithServiceResponseAsync().map(new Func1<ServiceResponse<BigDecimal>, BigDecimal>() {
            @Override
            public BigDecimal call(ServiceResponse<BigDecimal> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return the observable to the BigDecimal object
     */
    public Observable<ServiceResponse<BigDecimal>> getSmallDecimalWithServiceResponseAsync() {
        return service.getSmallDecimal()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BigDecimal>>>() {
                @Override
                public Observable<ServiceResponse<BigDecimal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BigDecimal> clientResponse = getSmallDecimalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BigDecimal> getSmallDecimalDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<BigDecimal, ErrorException>(this.client.mapperAdapter())
                .register(200, new TypeToken<BigDecimal>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
