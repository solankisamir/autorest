/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydatetimerfc1123;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Datetimerfc1123s.
 */
public interface Datetimerfc1123s {
    /**
     * Get null datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getNull();

    /**
     * Get null datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getNullAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get null datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getNullAsync();

    /**
     * Get null datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getNullWithServiceResponseAsync();

    /**
     * Get invalid datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getInvalid();

    /**
     * Get invalid datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getInvalidAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get invalid datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getInvalidAsync();

    /**
     * Get invalid datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getInvalidWithServiceResponseAsync();

    /**
     * Get overflow datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getOverflow();

    /**
     * Get overflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getOverflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get overflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getOverflowAsync();

    /**
     * Get overflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getOverflowWithServiceResponseAsync();

    /**
     * Get underflow datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUnderflow();

    /**
     * Get underflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUnderflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get underflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUnderflowAsync();

    /**
     * Get underflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUnderflowWithServiceResponseAsync();

    /**
     * Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     */
    void putUtcMaxDateTime(DateTime datetimeBody);

    /**
     * Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putUtcMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putUtcMaxDateTimeAsync(DateTime datetimeBody);

    /**
     * Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putUtcMaxDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get max datetime value fri, 31 dec 9999 23:59:59 gmt.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcLowercaseMaxDateTime();

    /**
     * Get max datetime value fri, 31 dec 9999 23:59:59 gmt.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value fri, 31 dec 9999 23:59:59 gmt.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcLowercaseMaxDateTimeAsync();

    /**
     * Get max datetime value fri, 31 dec 9999 23:59:59 gmt.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcLowercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcUppercaseMaxDateTime();

    /**
     * Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcUppercaseMaxDateTimeAsync();

    /**
     * Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcUppercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     */
    void putUtcMinDateTime(DateTime datetimeBody);

    /**
     * Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putUtcMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putUtcMinDateTimeAsync(DateTime datetimeBody);

    /**
     * Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @param datetimeBody the DateTimeRfc1123 value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putUtcMinDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcMinDateTime();

    /**
     * Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcMinDateTimeAsync();

    /**
     * Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcMinDateTimeWithServiceResponseAsync();

}
