/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydatetime;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Datetimes.
 */
public interface Datetimes {
    /**
     * Get null datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getNull();

    /**
     * Get null datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getNullAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get null datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getNullAsync();

    /**
     * Get null datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getNullWithServiceResponseAsync();

    /**
     * Get invalid datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getInvalid();

    /**
     * Get invalid datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getInvalidAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get invalid datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getInvalidAsync();

    /**
     * Get invalid datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getInvalidWithServiceResponseAsync();

    /**
     * Get overflow datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getOverflow();

    /**
     * Get overflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getOverflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get overflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getOverflowAsync();

    /**
     * Get overflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getOverflowWithServiceResponseAsync();

    /**
     * Get underflow datetime value.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUnderflow();

    /**
     * Get underflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUnderflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get underflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUnderflowAsync();

    /**
     * Get underflow datetime value.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUnderflowWithServiceResponseAsync();

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the DateTime value
     */
    void putUtcMaxDateTime(DateTime datetimeBody);

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putUtcMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putUtcMaxDateTimeAsync(DateTime datetimeBody);

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putUtcMaxDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcLowercaseMaxDateTime();

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcLowercaseMaxDateTimeAsync();

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcLowercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcUppercaseMaxDateTime();

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcUppercaseMaxDateTimeAsync();

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcUppercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the DateTime value
     */
    void putLocalPositiveOffsetMaxDateTime(DateTime datetimeBody);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putLocalPositiveOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putLocalPositiveOffsetMaxDateTimeAsync(DateTime datetimeBody);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putLocalPositiveOffsetMaxDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalPositiveOffsetLowercaseMaxDateTime();

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalPositiveOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalPositiveOffsetLowercaseMaxDateTimeAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalPositiveOffsetLowercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalPositiveOffsetUppercaseMaxDateTime();

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalPositiveOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalPositiveOffsetUppercaseMaxDateTimeAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalPositiveOffsetUppercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the DateTime value
     */
    void putLocalNegativeOffsetMaxDateTime(DateTime datetimeBody);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putLocalNegativeOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putLocalNegativeOffsetMaxDateTimeAsync(DateTime datetimeBody);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putLocalNegativeOffsetMaxDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalNegativeOffsetUppercaseMaxDateTime();

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalNegativeOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalNegativeOffsetUppercaseMaxDateTimeAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalNegativeOffsetUppercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalNegativeOffsetLowercaseMaxDateTime();

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalNegativeOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalNegativeOffsetLowercaseMaxDateTimeAsync();

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalNegativeOffsetLowercaseMaxDateTimeWithServiceResponseAsync();

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the DateTime value
     */
    void putUtcMinDateTime(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putUtcMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putUtcMinDateTimeAsync(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putUtcMinDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @return the DateTime object if successful.
     */
    DateTime getUtcMinDateTime();

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getUtcMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getUtcMinDateTimeAsync();

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getUtcMinDateTimeWithServiceResponseAsync();

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the DateTime value
     */
    void putLocalPositiveOffsetMinDateTime(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putLocalPositiveOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putLocalPositiveOffsetMinDateTimeAsync(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putLocalPositiveOffsetMinDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalPositiveOffsetMinDateTime();

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalPositiveOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalPositiveOffsetMinDateTimeAsync();

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalPositiveOffsetMinDateTimeWithServiceResponseAsync();

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the DateTime value
     */
    void putLocalNegativeOffsetMinDateTime(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putLocalNegativeOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putLocalNegativeOffsetMinDateTimeAsync(DateTime datetimeBody);

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the DateTime value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putLocalNegativeOffsetMinDateTimeWithServiceResponseAsync(DateTime datetimeBody);

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @return the DateTime object if successful.
     */
    DateTime getLocalNegativeOffsetMinDateTime();

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DateTime> getLocalNegativeOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<DateTime> getLocalNegativeOffsetMinDateTimeAsync();

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @return the observable to the DateTime object
     */
    Observable<ServiceResponse<DateTime>> getLocalNegativeOffsetMinDateTimeWithServiceResponseAsync();

}
