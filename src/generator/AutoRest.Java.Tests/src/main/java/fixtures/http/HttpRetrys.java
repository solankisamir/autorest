/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpRetrys.
 */
public interface HttpRetrys {
    /**
     * Return 408 status code, then 200 after retry.
     *
     */
    void head408();

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> head408Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> head408Async();

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> head408WithServiceResponseAsync();

    /**
     * Return 500 status code, then 200 after retry.
     *
     */
    void put500();

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> put500Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> put500Async();

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> put500WithServiceResponseAsync();
    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void put500(Boolean booleanValue);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> put500Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> put500Async(Boolean booleanValue);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> put500WithServiceResponseAsync(Boolean booleanValue);

    /**
     * Return 500 status code, then 200 after retry.
     *
     */
    void patch500();

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> patch500Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> patch500Async();

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> patch500WithServiceResponseAsync();
    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void patch500(Boolean booleanValue);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> patch500Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> patch500Async(Boolean booleanValue);

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> patch500WithServiceResponseAsync(Boolean booleanValue);

    /**
     * Return 502 status code, then 200 after retry.
     *
     */
    void get502();

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> get502Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> get502Async();

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> get502WithServiceResponseAsync();

    /**
     * Return 503 status code, then 200 after retry.
     *
     */
    void post503();

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> post503Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> post503Async();

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> post503WithServiceResponseAsync();
    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void post503(Boolean booleanValue);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> post503Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> post503Async(Boolean booleanValue);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> post503WithServiceResponseAsync(Boolean booleanValue);

    /**
     * Return 503 status code, then 200 after retry.
     *
     */
    void delete503();

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> delete503Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> delete503Async();

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> delete503WithServiceResponseAsync();
    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void delete503(Boolean booleanValue);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> delete503Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> delete503Async(Boolean booleanValue);

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> delete503WithServiceResponseAsync(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     */
    void put504();

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> put504Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> put504Async();

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> put504WithServiceResponseAsync();
    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void put504(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> put504Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> put504Async(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> put504WithServiceResponseAsync(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     */
    void patch504();

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> patch504Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> patch504Async();

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> patch504WithServiceResponseAsync();
    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     */
    void patch504(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> patch504Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> patch504Async(Boolean booleanValue);

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> patch504WithServiceResponseAsync(Boolean booleanValue);

}
