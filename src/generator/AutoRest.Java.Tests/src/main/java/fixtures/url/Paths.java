/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.url;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import fixtures.url.models.UriColor;
import java.util.List;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Paths.
 */
public interface Paths {
    /**
     * Get true Boolean value on path.
     *
     */
    void getBooleanTrue();

    /**
     * Get true Boolean value on path.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanTrueAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get true Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanTrueAsync();

    /**
     * Get true Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanTrueWithServiceResponseAsync();

    /**
     * Get false Boolean value on path.
     *
     */
    void getBooleanFalse();

    /**
     * Get false Boolean value on path.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanFalseAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get false Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanFalseAsync();

    /**
     * Get false Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanFalseWithServiceResponseAsync();

    /**
     * Get '1000000' integer value.
     *
     */
    void getIntOneMillion();

    /**
     * Get '1000000' integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntOneMillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntOneMillionAsync();

    /**
     * Get '1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntOneMillionWithServiceResponseAsync();

    /**
     * Get '-1000000' integer value.
     *
     */
    void getIntNegativeOneMillion();

    /**
     * Get '-1000000' integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntNegativeOneMillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntNegativeOneMillionAsync();

    /**
     * Get '-1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntNegativeOneMillionWithServiceResponseAsync();

    /**
     * Get '10000000000' 64 bit integer value.
     *
     */
    void getTenBillion();

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getTenBillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getTenBillionAsync();

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getTenBillionWithServiceResponseAsync();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     */
    void getNegativeTenBillion();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getNegativeTenBillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getNegativeTenBillionAsync();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getNegativeTenBillionWithServiceResponseAsync();

    /**
     * Get '1.034E+20' numeric value.
     *
     */
    void floatScientificPositive();

    /**
     * Get '1.034E+20' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatScientificPositiveAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '1.034E+20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatScientificPositiveAsync();

    /**
     * Get '1.034E+20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatScientificPositiveWithServiceResponseAsync();

    /**
     * Get '-1.034E-20' numeric value.
     *
     */
    void floatScientificNegative();

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatScientificNegativeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatScientificNegativeAsync();

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatScientificNegativeWithServiceResponseAsync();

    /**
     * Get '9999999.999' numeric value.
     *
     */
    void doubleDecimalPositive();

    /**
     * Get '9999999.999' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleDecimalPositiveAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleDecimalPositiveAsync();

    /**
     * Get '9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleDecimalPositiveWithServiceResponseAsync();

    /**
     * Get '-9999999.999' numeric value.
     *
     */
    void doubleDecimalNegative();

    /**
     * Get '-9999999.999' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleDecimalNegativeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleDecimalNegativeAsync();

    /**
     * Get '-9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleDecimalNegativeWithServiceResponseAsync();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     */
    void stringUnicode();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringUnicodeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringUnicodeAsync();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringUnicodeWithServiceResponseAsync();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     */
    void stringUrlEncoded();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringUrlEncodedAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringUrlEncodedAsync();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringUrlEncodedWithServiceResponseAsync();

    /**
     * Get ''.
     *
     */
    void stringEmpty();

    /**
     * Get ''.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringEmptyAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get ''.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringEmptyAsync();

    /**
     * Get ''.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringEmptyWithServiceResponseAsync();

    /**
     * Get null (should throw).
     *
     * @param stringPath null string value
     */
    void stringNull(String stringPath);

    /**
     * Get null (should throw).
     *
     * @param stringPath null string value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringNullAsync(String stringPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (should throw).
     *
     * @param stringPath null string value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringNullAsync(String stringPath);

    /**
     * Get null (should throw).
     *
     * @param stringPath null string value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringNullWithServiceResponseAsync(String stringPath);

    /**
     * Get using uri with 'green color' in path parameter.
     *
     * @param enumPath send the value green. Possible values include: 'red color', 'green color', 'blue color'
     */
    void enumValid(UriColor enumPath);

    /**
     * Get using uri with 'green color' in path parameter.
     *
     * @param enumPath send the value green. Possible values include: 'red color', 'green color', 'blue color'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumValidAsync(UriColor enumPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get using uri with 'green color' in path parameter.
     *
     * @param enumPath send the value green. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumValidAsync(UriColor enumPath);

    /**
     * Get using uri with 'green color' in path parameter.
     *
     * @param enumPath send the value green. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumValidWithServiceResponseAsync(UriColor enumPath);

    /**
     * Get null (should throw on the client before the request is sent on wire).
     *
     * @param enumPath send null should throw. Possible values include: 'red color', 'green color', 'blue color'
     */
    void enumNull(UriColor enumPath);

    /**
     * Get null (should throw on the client before the request is sent on wire).
     *
     * @param enumPath send null should throw. Possible values include: 'red color', 'green color', 'blue color'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumNullAsync(UriColor enumPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (should throw on the client before the request is sent on wire).
     *
     * @param enumPath send null should throw. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumNullAsync(UriColor enumPath);

    /**
     * Get null (should throw on the client before the request is sent on wire).
     *
     * @param enumPath send null should throw. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumNullWithServiceResponseAsync(UriColor enumPath);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     */
    void byteMultiByte(byte[] bytePath);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteMultiByteAsync(byte[] bytePath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteMultiByteAsync(byte[] bytePath);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param bytePath '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteMultiByteWithServiceResponseAsync(byte[] bytePath);

    /**
     * Get '' as byte array.
     *
     */
    void byteEmpty();

    /**
     * Get '' as byte array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteEmptyAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '' as byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteEmptyAsync();

    /**
     * Get '' as byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteEmptyWithServiceResponseAsync();

    /**
     * Get null as byte array (should throw).
     *
     * @param bytePath null as byte array (should throw)
     */
    void byteNull(byte[] bytePath);

    /**
     * Get null as byte array (should throw).
     *
     * @param bytePath null as byte array (should throw)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteNullAsync(byte[] bytePath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as byte array (should throw).
     *
     * @param bytePath null as byte array (should throw)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteNullAsync(byte[] bytePath);

    /**
     * Get null as byte array (should throw).
     *
     * @param bytePath null as byte array (should throw)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteNullWithServiceResponseAsync(byte[] bytePath);

    /**
     * Get '2012-01-01' as date.
     *
     */
    void dateValid();

    /**
     * Get '2012-01-01' as date.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '2012-01-01' as date.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateValidAsync();

    /**
     * Get '2012-01-01' as date.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateValidWithServiceResponseAsync();

    /**
     * Get null as date - this should throw or be unusable on the client side, depending on date representation.
     *
     * @param datePath null as date (should throw)
     */
    void dateNull(LocalDate datePath);

    /**
     * Get null as date - this should throw or be unusable on the client side, depending on date representation.
     *
     * @param datePath null as date (should throw)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateNullAsync(LocalDate datePath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date - this should throw or be unusable on the client side, depending on date representation.
     *
     * @param datePath null as date (should throw)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateNullAsync(LocalDate datePath);

    /**
     * Get null as date - this should throw or be unusable on the client side, depending on date representation.
     *
     * @param datePath null as date (should throw)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateNullWithServiceResponseAsync(LocalDate datePath);

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     */
    void dateTimeValid();

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateTimeValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateTimeValidAsync();

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateTimeValidWithServiceResponseAsync();

    /**
     * Get null as date-time, should be disallowed or throw depending on representation of date-time.
     *
     * @param dateTimePath null as date-time
     */
    void dateTimeNull(DateTime dateTimePath);

    /**
     * Get null as date-time, should be disallowed or throw depending on representation of date-time.
     *
     * @param dateTimePath null as date-time
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateTimeNullAsync(DateTime dateTimePath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date-time, should be disallowed or throw depending on representation of date-time.
     *
     * @param dateTimePath null as date-time
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateTimeNullAsync(DateTime dateTimePath);

    /**
     * Get null as date-time, should be disallowed or throw depending on representation of date-time.
     *
     * @param dateTimePath null as date-time
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateTimeNullWithServiceResponseAsync(DateTime dateTimePath);

    /**
     * Get 'lorem' encoded value as 'bG9yZW0' (base64url).
     *
     * @param base64UrlPath base64url encoded value
     */
    void base64Url(byte[] base64UrlPath);

    /**
     * Get 'lorem' encoded value as 'bG9yZW0' (base64url).
     *
     * @param base64UrlPath base64url encoded value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> base64UrlAsync(byte[] base64UrlPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get 'lorem' encoded value as 'bG9yZW0' (base64url).
     *
     * @param base64UrlPath base64url encoded value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> base64UrlAsync(byte[] base64UrlPath);

    /**
     * Get 'lorem' encoded value as 'bG9yZW0' (base64url).
     *
     * @param base64UrlPath base64url encoded value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> base64UrlWithServiceResponseAsync(byte[] base64UrlPath);

    /**
     * Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     */
    void arrayCsvInPath(List<String> arrayPath);

    /**
     * Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayCsvInPathAsync(List<String> arrayPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayCsvInPathAsync(List<String> arrayPath);

    /**
     * Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayPath an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayCsvInPathWithServiceResponseAsync(List<String> arrayPath);

    /**
     * Get the date 2016-04-13 encoded value as '1460505600' (Unix time).
     *
     * @param unixTimeUrlPath Unix time encoded value
     */
    void unixTimeUrl(DateTime unixTimeUrlPath);

    /**
     * Get the date 2016-04-13 encoded value as '1460505600' (Unix time).
     *
     * @param unixTimeUrlPath Unix time encoded value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> unixTimeUrlAsync(DateTime unixTimeUrlPath, final ServiceCallback<Void> serviceCallback);

    /**
     * Get the date 2016-04-13 encoded value as '1460505600' (Unix time).
     *
     * @param unixTimeUrlPath Unix time encoded value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> unixTimeUrlAsync(DateTime unixTimeUrlPath);

    /**
     * Get the date 2016-04-13 encoded value as '1460505600' (Unix time).
     *
     * @param unixTimeUrlPath Unix time encoded value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> unixTimeUrlWithServiceResponseAsync(DateTime unixTimeUrlPath);

}
