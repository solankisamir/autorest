/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import fixtures.bodycomplex.models.DictionaryWrapper;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Dictionarys.
 */
public interface Dictionarys {
    /**
     * Get complex types with dictionary property.
     *
     * @return the DictionaryWrapper object if successful.
     */
    DictionaryWrapper getValid();

    /**
     * Get complex types with dictionary property.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DictionaryWrapper> getValidAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     * Get complex types with dictionary property.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<DictionaryWrapper> getValidAsync();

    /**
     * Get complex types with dictionary property.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<ServiceResponse<DictionaryWrapper>> getValidWithServiceResponseAsync();

    /**
     * Put complex types with dictionary property.
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     */
    void putValid(DictionaryWrapper complexBody);

    /**
     * Put complex types with dictionary property.
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putValidAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put complex types with dictionary property.
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putValidAsync(DictionaryWrapper complexBody);

    /**
     * Put complex types with dictionary property.
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putValidWithServiceResponseAsync(DictionaryWrapper complexBody);

    /**
     * Get complex types with dictionary property which is empty.
     *
     * @return the DictionaryWrapper object if successful.
     */
    DictionaryWrapper getEmpty();

    /**
     * Get complex types with dictionary property which is empty.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DictionaryWrapper> getEmptyAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     * Get complex types with dictionary property which is empty.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<DictionaryWrapper> getEmptyAsync();

    /**
     * Get complex types with dictionary property which is empty.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<ServiceResponse<DictionaryWrapper>> getEmptyWithServiceResponseAsync();

    /**
     * Put complex types with dictionary property which is empty.
     *
     * @param complexBody Please put an empty dictionary
     */
    void putEmpty(DictionaryWrapper complexBody);

    /**
     * Put complex types with dictionary property which is empty.
     *
     * @param complexBody Please put an empty dictionary
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putEmptyAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put complex types with dictionary property which is empty.
     *
     * @param complexBody Please put an empty dictionary
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putEmptyAsync(DictionaryWrapper complexBody);

    /**
     * Put complex types with dictionary property which is empty.
     *
     * @param complexBody Please put an empty dictionary
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putEmptyWithServiceResponseAsync(DictionaryWrapper complexBody);

    /**
     * Get complex types with dictionary property which is null.
     *
     * @return the DictionaryWrapper object if successful.
     */
    DictionaryWrapper getNull();

    /**
     * Get complex types with dictionary property which is null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DictionaryWrapper> getNullAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     * Get complex types with dictionary property which is null.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<DictionaryWrapper> getNullAsync();

    /**
     * Get complex types with dictionary property which is null.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<ServiceResponse<DictionaryWrapper>> getNullWithServiceResponseAsync();

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload.
     *
     * @return the DictionaryWrapper object if successful.
     */
    DictionaryWrapper getNotProvided();

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<DictionaryWrapper> getNotProvidedAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<DictionaryWrapper> getNotProvidedAsync();

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload.
     *
     * @return the observable to the DictionaryWrapper object
     */
    Observable<ServiceResponse<DictionaryWrapper>> getNotProvidedWithServiceResponseAsync();

}
